// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Z$Kaplay from "@nojaf/rescript-kaplay/src/Components/Z.res.mjs";
import * as Constants from "./Constants.res.mjs";
import * as Pos$Kaplay from "@nojaf/rescript-kaplay/src/Components/Pos.res.mjs";
import * as Area$Kaplay from "@nojaf/rescript-kaplay/src/Components/Area.res.mjs";
import * as GameContext from "./GameContext.res.mjs";
import * as Rect$Kaplay from "@nojaf/rescript-kaplay/src/Components/Rect.res.mjs";
import * as Color$Kaplay from "@nojaf/rescript-kaplay/src/Components/Color.res.mjs";
import * as GameObjRaw$Kaplay from "@nojaf/rescript-kaplay/src/Components/GameObjRaw.res.mjs";

GameObjRaw$Kaplay.Comp({});

Pos$Kaplay.Comp({});

Rect$Kaplay.Comp({});

Color$Kaplay.Comp({});

Area$Kaplay.Comp({});

Z$Kaplay.Comp({});

function make(snakeHead, snakeTail) {
  let randomPos = () => {
    let max = Constants.gameSizeF - Constants.tileSize;
    let randomX = GameContext.k.rand(Constants.tileSize, max);
    let valueX = randomX - randomX % Constants.tileSize;
    let randomY = GameContext.k.rand(Constants.tileSize, max);
    let valueY = randomY - randomY % Constants.tileSize;
    return GameContext.k.vec2(valueX, valueY);
  };
  let isGoodPosition = pos => {
    if (snakeHead.hasPoint(pos)) {
      return false;
    } else {
      return snakeTail.every(tailPart => !tailPart.hasPoint(pos));
    }
  };
  let coinPos = () => {
    while (true) {
      let pos = randomPos();
      if (isGoodPosition(pos)) {
        return pos;
      }
      continue;
    };
  };
  GameContext.k.add([
    GameContext.k.rect(Constants.tileSize, Constants.tileSize),
    GameContext.k.color(Constants.yellow300),
    GameContext.k.pos(coinPos()),
    GameContext.k.area(),
    "Coin"
  ]);
}

export {
  make,
}
/*  Not a pure module */
